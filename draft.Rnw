%% This is an example file to show how to use JASA_manu.sty and related 
%% files written by Eric C. Anderson.  It's sort of a fly-by-night endeavor,
%% but I got it to work for me!!


\documentclass[12pt, letter]{article}
\usepackage[top=1in, bottom=1in, left=1in, right=1in]{geometry}
\usepackage{graphicx}
\usepackage{float}
\usepackage{amsmath, amssymb, mathtools }
\usepackage{enumerate}
\usepackage{array}
\usepackage{fancyhdr}
\usepackage{verbatim}
\usepackage{color}
\usepackage{pstricks}
\usepackage{eqnarray}
\usepackage{psfrag}
\usepackage{epsfig,epsf}
\usepackage{setspace}
\doublespacing
%% THE NEXT TWO LINES INSERT THE PACKAGES FOR JASA FORMAT:
\usepackage[default]{jasa_harvard}    % 	for formatting citations in text
\usepackage{JABES_manu}


%% CHANGING THE 'AND' IN THE HARVARD BIBLIOGRAPHY PACKAGE TO WHAT IT OUGHT TO BE
\renewcommand{\harvardand}{and}


%% A FEW NEWCOMMANDS FOR THE CONTENT IN THE EXAMPLE
%% NOT CRUCIAL TO THE USE OF JASA_manu.sty
\newcommand{\Dir}{\mathrm{Dir}}
\newcommand{\ceil}[1]{\lceil #1 \rceil}
\newcommand{\thh}{^\mathrm{th}}
\newcommand{\modtwo}{\mathrm{[mod~2]}}
\newcommand{\thetaof}[2]{\theta \langle #1;#2\rangle}
\newcommand{\Mpa}{M_\mathrm{P,A}}
\newcommand{\Ma}{M_\mathrm{A}}
\newcommand{\rjaccept}{\mathcal{A}}



%% Here is a hand-formatted bibliography reference list entry.
%% The command should be included in the NOTE field of the entry in the .bib file


\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
  # set global chunk options
  opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=90)
@


\title{\bf Detecting Differential Expressed Genes in RNA-Seq Data
Accounting for Nuisance Covariates}
\author{Dan Nettleton  and Yet Nguyen\\
Department of Statistics, 
Iowa State University, Ames, IA 50010%\\ 
%email: \texttt{ntyet@iastate.edu}
}

\maketitle


%% ABSTRACT

%\newpage
\begin{center}
\textbf{Abstract}
\end{center}
Differential Expression Analysis of RNA-Seq data can often be complicated by the presence of nuisance factors that arise due to experimental design limitations and heterogeneity of experimental units that can be seen in continuous and categorical covariates measured for each experimental unit and/or RNA sample. The analysis is typically done by including or ignoring all nuisance covariates. Some drawbacks of those approaches are that the FDR usually too conservative or too liberal, and the power of detecting differentiallly expressed genes is very low. To address these shortcoming, we develop a backward selection procedure to pick up the most significant covariates, which inturn are used to identify  genes that are differentially expressed. The proposed method is then applied to RNA-Seq data from Residual Feed Intake project. Furthermore, simulation results from real data show that our proposed method outperforms the traditional strategies used to detect differential expression genes accounting for nuisance covariates.



\vspace*{.3in}

\noindent\textsc{Keywords}: {Backward Model Selection, Grenander Estimator,  False Discovery Rate, Partial AUC, Cramer Von Mises, RNA-Seq, Nuisance Covariates, Differential Expression Analysis.}

%\newpage

\section{\bf Introduction}
A nuisance variable, or confounded variable, is an unwanted variable that is correlated with the outcome within an experimental study and is typically of no interest to the researcher. It might be a characteristic of the experimental unit under study or any unintended influence on an experimental manipulation. A nuisance variable causes greater variability in the distribution of a sample's scores and affects all the groups measured within a given sample. In the situation of RNA-Seq experiment, accounting for nuisance variable is becoming increasingly important due to very expensive cost of the high throughput sequencing technology.

As a specific motivation example, consider the RNA-Seq experiment conducted by ISU  researchers to examine gene expression in two Yorkshire residual feed intake (RFI) pig \emph{lines} feeded either by \emph{high fiber-low energy diet} or \emph{low fiber-high energy diet}. Illumina RNASeq was used to measure gene expression total 31 pigs  of full 2-factor factorial design $\emph{Line} \times \emph{Diet}$. 

The main purpose of the experiment  can be describled as follows. Prior of the experiment, it was known that feed is the largest cost of US pork producer, representing 55 to 60 \% of the total cost. Hence, knowlegde on efficiency of nutrient utilization and development of new technology and mechanisms for improving feed efficiency (FE) is critical to the long term competitiveness of the US pork industry and for improving the sustainability of food supplies. In constrast to the mechanisms that govern  growth and development, our understandingn of the biological mechanisms regulating feed efficienty is limited. Therefore there is a critical need to define the mechanisms that regulate feed efficiency. Koch et. al(?) suggested the concept of residual feed intake to measure FE in cattle. RFI partitions feed intake into two part: the level of intake expected in onder to support a given rate of gain, plus a residual portion. Efficient animals have a low negative RFI, i.e., they consume less feed than expected for their rate of gain. RFI is the unique measure of FE because it represents true differences in the ability of animals to use feed energy for the metabolic processes of maintenance and growth. However, measuring RFI is expensive and time-consuming. The purpose of the study is to use whole blood from 4-5 week-old pigs  to identify differentially expressed genes between two Yorkshire lines of pigs divergently based on RFI, with the final goal of developing usefull biomakers for FE. 

Blood samples were collected into Tempus 
tubes for long-term storage and EDTA tubes for 
complete blood count (CBC) test from 233 piglets 
(Generation 9, at 35 ~ 42 days of age) of the two 
Yorkshire lines of pigs divergently selected for FE 
based on RFI, the low RFI line and the high RFI line. 
We subsequently measured the complete blood count 
(CBC) of all blood samples. These animals were later 
randomly assigned to two diets of different fiber and 
energy content, and each pigâ€™s RFI was measured on 
FIRE feeders. Blood samples of 8 animals of 
extremely low RFI for the low RFI line and 
extremely high RFI for the high RFI line on each diet 
were selected for RNA-sequencing, with one sample 
later dropped due to low RNA quality. RNA samples 
were prepared and globin transcripts were depleted 
by an RNase H-mediated method before RNA 
sequencing. One hundred bp paired-end sequencing 
was run on the Illumina HiSeq 2000 platform. Reads 
were mapped to the pig reference genome 
(Sscrofa10.2.76) using aligner STAR after quality 
trimming and featureCounts was used to get read 
counts for each gene. In summary, the main effect of interest is RFI Line effect (Line), and a number of nuisance covariates such as Diet, RFI value, 
CBC values (lymphocite, neutrophil, monocyte, basophil and eisophil), and some technical variables such as processing batch (Block), processing order (Blockorder), RNA concentration before and after globin depletion (Concb, Conca), RNA Integrity Number before and after globin depletion (RINb, RINa). The RNA-Seq data consists of 12280 genes and 31 samples. 
The preliminary analysis result of this data is either including all nuisance covariates, or ignore all nuisance covariates using QuasiSeq (Lund et al. 2012). There are 2 genes declared differentially expressed between 2 RFI lines if fitting the full model with all covariates when controlling FDR at 5\%.  For the model ignoring all nuicanse covariates, there are 233 differentially expressed genes when controlling FDR at 5\%.   The Figure 1  is showing histograms of pvalues for testing the significant of Line effect for those two scenariors. 
<<echo = FALSE,out.width='6cm', out.height='6cm', fig.show='hold',  fig.cap="The left Figure is the histogram of pvalue of Line effect for model including Line effect and all nuisance covariates. The right Figure is the histofram of pvalue of line effect for model including only Line Effect, and does not include any nuisance covariates.",warning=FALSE,message=FALSE,fig.pos="H">>=
library(ggplot2)
load("Model1_result.RData")
# hist(result$P.values[[3]][,"Line"], nclass = 100, cex = 10, 
#      main = "Model includes Line and all Nuisance Covariates",
#      xlab = "p-value of Line Effect",
#      ylab = "Frequency")

p1 <- ggplot(as.data.frame(result$P.values[[3]]), aes(x = Line))
p1 + geom_histogram(binwidth = .01, fill = "white",colour = "darkgreen") + 
  xlab("p-value of Line efffect") +labs(title = "Model Including Line and All Nuisance Covariates")+
  theme(plot.title = element_text(size = rel(2)))+
   theme(axis.title.y = element_text(size = rel(2), angle = 90))+
   theme(axis.title.x = element_text(size = rel(2)))
load("Model10_result.RData")
p1 <- ggplot(as.data.frame(result$P.values[[3]]), aes(x = Line))

p1 + geom_histogram(binwidth = .01, fill = "white",colour = "darkgreen") + 
  xlab("p-value of Line efffect") +labs(title = "Model Including only Line")+
  theme(plot.title = element_text(size = rel(2)))+
   theme(axis.title.y = element_text(size = rel(2), angle = 90))+
   theme(axis.title.x = element_text(size = rel(2)))

# hist(result$P.values[[3]][,"Line"], nclass = 100,
#      main = "Model includes only Line Effect",
#      xlab = "p-value of Line Effect",
#      ylab = "Frequency")

@

This article focuses on backward model selection procedure for choosing the model which optimal for differential expression analysis in the sense that the power of detecting differential expression genes is largest. The basis method is described in Section 2. Section 2.1 contains preliminary setup of probability model for RNA-Seq count data. Section 2.2 reviews the results on Grenander estimator of non-increasing probablility distribution function and Kolmogorov-Smirnov statistic between two distribution (ks). Section 2.3 and 2.4 contains the description of backward selection procedure using ks criteria and number of pvalues less than 0.05 (pvalue05), respectively. Section 3 demonstrate the approach using RFI RNA-Seq data above. Section 4 devotes to a simulation study that compares the proposed approach to the traditional approaches which are including or excluding all nuisance covariates. The article concludes and provides ideas for future works in Section 5. 
\section{\bf Methods}
\subsection{\bf Model for Count Data}
Let $y_{gij}$ is the count of gene $g$ from experimental unit $j$ of treatment group $i$. Then suppose 
\[
y_{gij} \sim NB(\mu_{gij}, \omega_g), \log(\mu_{gij}) = o_{ij} + Line*\beta_{line} + X_{(ij)}\beta,
\]

where $X$ is the desing matrix $31\times 23$ and $X_{(ij)}$ is the row of $X$ 
corresponding to sample $j$ of treatment group $i$, $\beta$ is the vector of parameter corresponding to  nuisance covariates.
\subsection{\bf False Discovery Rate}
...............
\subsection{\bf Grenander Estimator of Non increasing PDF}
The Grenander (1956) density estimator is given by the slopes of the least concave majorant (LCM) of the empirical distribution function (ECDF). It is a decreasing piecewise-constant function and can be shown to be the non-parametric maximum likelihood estimate (NPMLE) under the assumption of a decreasing density (note that the ECDF is the NPMLE without this assumption). 

\subsection{\bf Anderson-Darling Statistics}
The Anderson-Darling  statistics is a criterion used for calculating the distance between  a cumulative distribution function $F^*$ compared to a given empirical distribution function $F_n$, or for comparing two empirical distributions. It is defined as

\[
\omega^2 = \int_{-\infty}^{\infty} [F_n(x)-F^*(x)]^2\,\mathrm{d}F^*(x) .
\]
.....................
\subsection{Backward Selection Procedure and Stopping Criteria}

Starting model includes all covariates of interest. For each covariate,
we conduct a Likelihood Ratio Test using QuasiSeq of the full model
vs. the reduced model obtained from the full model by deleting the
considered covariate. We collect the set of pvalues of all genes from
the tests.
Obtain the number of genes with pvalues less than or equal 0.05 (This is the criterion named pvalue05).
Obtain Grenander CDF estimator of the empirical CDF of the sample
from those pvalues.
Obtain Craá¸¿er-Von-Mises statistics,
 statistics between the Grenander CDF and
uniform(0,1) CDF.
Exclude the covariate corresponding to the smallest value in each criterion.

The procedure will be terminated until the Line effect is excluded.  Then the final model will be used for differential expression analysis will be the model which has largest number of pvalue of Line effect less than 0.05.
\section{\bf Real Data Analysis}
\begin{figure}[h!]
\centering
\includegraphics[scale = 0.27]{PlotG9P2PairedEndCBCpvalue05.pdf}
\caption{Backward Modelselection for RFI data using the criterion based on number of pvalue less than 0.05 in each step of excluding one covariate. }
\end{figure}


\begin{figure}[h!]
\centering
\includegraphics[scale = 0.27]{PlotG9P2PairedEndCBCks.pdf}
\caption{Backward Modelselection for RFI data using the criterion based on Kolmogorov-Smirnov statistics in each step of excluding one covariate. }
\end{figure}


\section{\bf Simulation Justification based on Real Data}
We perform a simulation study based on the RNASeq data from RFI project. From choosen 
model (model 7 of pvalue05 criterion), we obtain estimates of coeficients of $\beta_{Line}$ and $\beta$, also estimate of the number of true null $m_{0}$ for Line effect. Then we assign the coefficient $\beta_{Line}$ of  $m_0$  least significant genes (with respect to Line effect) = 0. The other coefficients keep the same. 

Next, we select the genes whose correlation of fitted count and real count data is at lest 0.8 to be the set of genes that we will simulate the count data. We randomly pickup 5000 genes from this set and simulate a count data of size $5000\times 31$ where each count value is simulated from a negative binomial distribution with mean and dispersion parameters are those of fitted original genes. Then, we apply pvalue05 criteria for selection model procedure. And we also run a model with only Line effect to do comparision. There are 100 simulations. The result is summarized in the table below.
% \begin{tabular}
% Method    & FDR(sdFDR)  & Rt (sdRt)\\
% pvalue05  & 0.105(0.002) &  
% \end{tabular}

<<echo = FALSE,warning=FALSE,message=FALSE, results='asis'>>=
pi0 <- c(0.9, 0.8, 0.7, 0.6)
fdrb.mean <- fdrf.mean <- fdro.mean <- fdrl.mean <- NULL
fdrb.se <- fdrf.se <- fdro.se <- fdrl.se <- NULL

stb.mean <- stf.mean <- sto.mean <- stl.mean <- NULL
stb.se <- stf.se <- sto.se <- stl.se <- NULL

paucb.mean <- paucf.mean <- pauco.mean <- paucl.mean <- NULL
paucb.se <- paucf.se <- pauco.se <- paucl.se <- NULL
best.model <- NULL
bm <- list()
sm <- matrix(0, nrow = 200, ncol = 16)
colnames(sm) <-c("pi", "Line", "Diet", "RFI", 
                 "Concb", "RINb", "Conca", "RINa",
                 "neut", "lymp",
                 "mono", "eosi", "baso", 
                 "Block", "Order", 
                 "ks")
ism <- 0
full <- c("Line", "Diet", "RFI", 
                 "Concb", "RINb", "Conca", "RINa",
                 "neut", "lymp",
                 "mono", "eosi", "baso", 
                 "Block", "Order")
nmax.model <- NULL
for (pind in 1:length(pi0))# pind <- 2
{
  dir <- paste0("pvalue05/pi0_", pi0[pind])

dir.list <- list.files(dir)
indres <- grep("res", dir.list)
indlistout <- grep("listout", dir.list)
nrep <- length(indres)

rt.b <- fdr.b <- pauc.b <- st.b <- NULL
rt.f<- fdr.f<- pauc.f <- st.f<- NULL
  rt.l <- fdr.l <- pauc.l <- st.l <- NULL
  rt.o <- fdr.o <- pauc.o <- st.o <- NULL
b <- NULL
  n.max <- NULL
for(i in 1:length(indres)){
   diri <- paste0(dir, "/", dir.list[indres[i]])
   dirl <- paste0(dir, "/", dir.list[indlistout[i]])
   load(file = diri)
   listout <- read.csv(dirl)$cov_del
   listout <- gsub("Blockorder", "Order", listout)
   l <- length(res$rt.est) 
   rt.b[i] <- max(res$rt.est[-c(l,l-1)])
   temp <- which(res$rt.est[-c(l,l-1)] ==rt.b[i])
   ind.b <- temp[length(temp)]
  fdr.b[i] <- res$fdr.est[ind.b]
  st.b[i] <- res$st.est[ind.b]
  pauc.b[i] <- res$pauc.est[ind.b]
  n.max[i] <- ifelse(sum(res$rt.est[-c(l,l-1)] ==rt.b[i])==1, 0, 1)  
  
   
  if (ind.b >1) ch <- setdiff(full, listout[1:(ind.b-1)])
  if (ind.b ==1) ch <- full
  x <- NULL
  for(j in 1:length(ch)){
    x <- paste0(x, ch[j])
  }
  b[i] <- x
  
  
  fdr.f[i] <- res$fdr.est[1]
  rt.f[i] <- res$rt.est[1]
  st.f[i] <- res$st.est[1]
  pauc.f[i] <- res$pauc.est[1]
  
  
  fdr.l[i] <- res$fdr.est[l-1]
  rt.l[i] <- res$rt.est[l-1]
  st.l[i] <- res$st.est[l-1]
  pauc.l[i] <- res$pauc.est[l-1]
  
  fdr.o[i] <- res$fdr.est[l]
  rt.o[i] <- res$rt.est[l]
  st.o[i] <- res$st.est[l]
  pauc.o[i] <- res$pauc.est[l]
  
}
 nmax.model[pind] <- sum(n.max) 
bm[[pind]] <- b
fdrb.mean[pind] <- mean(fdr.b); fdrf.mean[pind] <- mean(fdr.f);fdro.mean[pind] <- mean(fdr.o);fdrl.mean[pind] <- mean(fdr.l)

fdrb.se[pind] <- sd(fdr.b)/sqrt(nrep);fdrf.se[pind] <- sd(fdr.f)/sqrt(nrep);fdro.se[pind] <- sd(fdr.o)/sqrt(nrep);fdrl.se[pind] <- sd(fdr.l)/sqrt(nrep)
  
  
stb.mean[pind] <- mean(st.b); stf.mean[pind] <- mean(st.f);sto.mean[pind] <- mean(st.o);stl.mean[pind] <- mean(st.l)

stb.se[pind] <- sd(st.b)/sqrt(nrep);stf.se[pind] <- sd(st.f)/sqrt(nrep);sto.se[pind] <- sd(st.o)/sqrt(nrep);stl.se[pind] <- sd(st.l)/sqrt(nrep)
  

paucb.mean[pind] <- mean(pauc.b); paucf.mean[pind] <- mean(pauc.f,na.rm = T);pauco.mean[pind] <- mean(pauc.o);paucl.mean[pind] <- mean(pauc.l)

paucb.se[pind] <- sd(pauc.b)/sqrt(nrep);paucf.se[pind] <- sd(pauc.f, na.rm = T)/sqrt(length(!is.na(pauc.f)));pauco.se[pind] <- sd(pauc.o)/sqrt(nrep);paucl.se[pind] <- sd(pauc.l)/sqrt(nrep)
  

best.model[pind] <- mean(bm[[pind]]=="LineConcbRINaneutlympmonobasoBlock") # best.model.est
#   print(paste("summary for pi0 = ", pi0[pind]))
  
#   print(table(bm[[pind]]))# pind <- 1
    
#   dimnames(table(bm[[pind]]))[[1]]
  t <- table(bm[[pind]])
  nt <- names(t)
   for (k in 1:length(t)){
     ism <- ism+1
     sm[ism, 1] <- pi0[pind]
     for(m in c(2:15)){
       if (length(grep(colnames(sm)[m], nt[k] )==1)) sm[ism, m] <- 1
     }
     sm[ism, 16] <- t[[k]]
   }
    
}
# nmax.model
# best.model
# ind.nmax.model

library(xtable)
sm[,1] <- as.character(sm[,1])
colnames(sm) <- c("$\\pi$","Line", "Diet", "RFI", "Concb", "RINb",
                      "Conca", "RINa", "neut", "lymp",
                      "mono","eosi","baso","Block","Order",
                      "pvalue05")

table.sm <- xtable(sm[1:36,],include.rownames=FALSE)
align(table.sm) <- "r|c|cccccccccccccc|c|"
print(table.sm,include.rownames=FALSE,
      hline.after=c(-1,0,11,20,27,36), 
      digits = 0, 
      sanitize.colnames.function = identity,
      size="scriptsize")


#################################

outfdrb <- data.frame(pi0 = pi0, fdrb.mean = fdrb.mean, fdrb.se= fdrb.se, true.model = best.model)
outfdrf <- data.frame(pi0 = pi0, fdrf.mean = fdrf.mean, fdrf.se= fdrf.se, true.model = best.model)
outfdro <- data.frame(pi0 = pi0, fdro.mean = fdro.mean, fdro.se= fdro.se, true.model = best.model)
outfdrl <- data.frame(pi0 = pi0, fdrl.mean = fdrl.mean, fdrl.se= fdrl.se, true.model = best.model)
# 
# outfdrb
# outfdro
# outfdrf
# outfdrl

outpaucb <- data.frame(pi0 = pi0, paucb.mean = paucb.mean, paucb.se= paucb.se, true.model = best.model)
outpaucf <- data.frame(pi0 = pi0, paucf.mean = paucf.mean, paucf.se= paucf.se, true.model = best.model)
outpauco <- data.frame(pi0 = pi0, pauco.mean = pauco.mean, pauco.se= pauco.se, true.model = best.model)
outpaucl <- data.frame(pi0 = pi0, paucl.mean = paucl.mean, paucl.se= paucl.se, true.model = best.model)

# outpaucb
# outpauco
# outpaucf
# outpaucl


outstb <- data.frame(pi0 = pi0, stb.mean = stb.mean, stb.se= stb.se, true.model = best.model)
outstf <- data.frame(pi0 = pi0, stf.mean = stf.mean, stf.se= stf.se, true.model = best.model)
outsto <- data.frame(pi0 = pi0, sto.mean = sto.mean, sto.se= sto.se, true.model = best.model)
outstl <- data.frame(pi0 = pi0, stl.mean = stl.mean, stl.se= stl.se, true.model = best.model)

# outstb
# outsto
# outstf
# outstl

fdr <- c(fdrb.mean, fdro.mean, fdrl.mean, fdrf.mean)
pauc<- c(paucb.mean, pauco.mean, paucl.mean, paucf.mean)
st <- c(stb.mean, sto.mean, stl.mean, stf.mean)

fdrse <- c(fdrb.se, fdro.se, fdrl.se, fdrf.se)
paucse<- c(paucb.se, pauco.se, paucl.se, paucf.se)
stse <- c(stb.se, sto.se, stl.se, stf.se)

p <- rep(pi0, 4)
mt <- rep(c("B", "O", "L", "F"), each = 4)
library(ggplot2)
d1 <- data.frame(p = p, mt = mt, fdr = fdr, pauc = pauc, st = st,
                  fdrse = fdrse, paucse = paucse, stse = stse)

###################################

pi0 <- c(0.9, 0.8, 0.7, 0.6)
fdrb.mean <- fdrf.mean <- fdro.mean <- fdrl.mean <- NULL
fdrb.se <- fdrf.se <- fdro.se <- fdrl.se <- NULL

stb.mean <- stf.mean <- sto.mean <- stl.mean <- NULL
stb.se <- stf.se <- sto.se <- stl.se <- NULL

paucb.mean <- paucf.mean <- pauco.mean <- paucl.mean <- NULL
paucb.se <- paucf.se <- pauco.se <- paucl.se <- NULL
best.model <- NULL
bm <- list()
sm <- matrix(0, nrow = 200, ncol = 16)
colnames(sm) <-c("pi", "Line", "Diet", "RFI", 
                 "Concb", "RINb", "Conca", "RINa",
                 "neut", "lymp",
                 "mono", "eosi", "baso", 
                 "Block", "Order", 
                 "ks")
ism <- 0
full <- c("Line", "Diet", "RFI", 
                 "Concb", "RINb", "Conca", "RINa",
                 "neut", "lymp",
                 "mono", "eosi", "baso", 
                 "Block", "Order")
nmax.model <- NULL
for (pind in 1:length(pi0))# pind <- 1
{
  dir <- paste0("ks/pi0_", pi0[pind])

dir.list <- list.files(dir)
indres <- grep("res", dir.list)
indlistout <- grep("listout", dir.list)
nrep <- length(indres)

rt.b <- fdr.b <- pauc.b <- st.b <- NULL
rt.f<- fdr.f<- pauc.f <- st.f<- NULL
  rt.l <- fdr.l <- pauc.l <- st.l <- NULL
  rt.o <- fdr.o <- pauc.o <- st.o <- NULL
b <- NULL
  n.max <- NULL
for(i in 1:length(indres)){ # i <- 17
   diri <- paste0(dir, "/", dir.list[indres[i]])
   dirl <- paste0(dir, "/", dir.list[indlistout[i]])
   load(file = diri)
   listout <- read.csv(dirl)$cov_del
   listout <- gsub("Blockorder", "Order", listout)
   l <- length(res$rt.est) 
   rt.b[i] <- max(res$rt.est[-c(l,l-1)])
   temp <- which(res$rt.est[-c(l,l-1)] ==rt.b[i])
   ind.b <- temp[length(temp)]
  fdr.b[i] <- res$fdr.est[ind.b]
  st.b[i] <- res$st.est[ind.b]
  pauc.b[i] <- res$pauc.est[ind.b]
  n.max[i] <- ifelse(sum(res$rt.est[-c(l,l-1)] ==rt.b[i])==1, 0, 1)  
  
  if (ind.b >1) ch <- setdiff(full, listout[1:(ind.b-1)])
  if (ind.b ==1) ch <- full
  
   x <- NULL
  for(j in 1:length(ch)){
  if(ch[j]=="Blockorder") ch[j] <- "Order"
    x <- paste0(x, ch[j])
  }
  b[i] <- x
  
  
  fdr.f[i] <- res$fdr.est[1]
  rt.f[i] <- res$rt.est[1]
  st.f[i] <- res$st.est[1]
  pauc.f[i] <- res$pauc.est[1]
  
  
  fdr.l[i] <- res$fdr.est[l-1]
  rt.l[i] <- res$rt.est[l-1]
  st.l[i] <- res$st.est[l-1]
  pauc.l[i] <- res$pauc.est[l-1]
  
  fdr.o[i] <- res$fdr.est[l]
  rt.o[i] <- res$rt.est[l]
  st.o[i] <- res$st.est[l]
  pauc.o[i] <- res$pauc.est[l]
  
}
 nmax.model[pind] <- sum(n.max) 
bm[[pind]] <- b
fdrb.mean[pind] <- mean(fdr.b); fdrf.mean[pind] <- mean(fdr.f);fdro.mean[pind] <- mean(fdr.o);fdrl.mean[pind] <- mean(fdr.l)

fdrb.se[pind] <- sd(fdr.b)/sqrt(nrep);fdrf.se[pind] <- sd(fdr.f)/sqrt(nrep);fdro.se[pind] <- sd(fdr.o)/sqrt(nrep);fdrl.se[pind] <- sd(fdr.l)/sqrt(nrep)
  
  
stb.mean[pind] <- mean(st.b); stf.mean[pind] <- mean(st.f);sto.mean[pind] <- mean(st.o);stl.mean[pind] <- mean(st.l)

stb.se[pind] <- sd(st.b)/sqrt(nrep);stf.se[pind] <- sd(st.f)/sqrt(nrep);sto.se[pind] <- sd(st.o)/sqrt(nrep);stl.se[pind] <- sd(st.l)/sqrt(nrep)
  

paucb.mean[pind] <- mean(pauc.b); paucf.mean[pind] <- mean(pauc.f,na.rm = T);pauco.mean[pind] <- mean(pauc.o);paucl.mean[pind] <- mean(pauc.l)

paucb.se[pind] <- sd(pauc.b)/sqrt(nrep);paucf.se[pind] <- sd(pauc.f, na.rm = T)/sqrt(length(!is.na(pauc.f)));pauco.se[pind] <- sd(pauc.o)/sqrt(nrep);paucl.se[pind] <- sd(pauc.l)/sqrt(nrep)
  

best.model[pind] <- mean(bm[[pind]]=="LineConcbRINaneutlympmonobasoBlock") # best.model.est
  #print(paste("summary for pi0 = ", pi0[pind]))
  
#   print(table(bm[[pind]]))# pind <- 1
    
#   dimnames(table(bm[[pind]]))[[1]]
  t <- table(bm[[pind]])
  nt <- names(t)
   for (k in 1:length(t)){
     ism <- ism+1
     sm[ism, 1] <- pi0[pind]
     for(m in c(2:15)){
       if (length(grep(colnames(sm)[m], nt[k] )==1)) sm[ism, m] <- 1
     }
     sm[ism, 16] <- t[[k]]
   }
    
}
# nmax.model
# best.model
# ind.nmax.model

library(xtable)
sm[,1] <- as.character(sm[,1])
colnames(sm) <- c("$\\pi$", "Line", "Diet", "RFI", "Concb", "RINb",
                      "Conca", "RINa", "neut", "lymp",
                      "mono","eosi","baso","Block","Order",
                      "ks")

table.sm <- xtable(sm[1:36,],include.rownames=FALSE)
align(table.sm) <- "r|c|cccccccccccccc|c|"

print(table.sm,include.rownames=FALSE,
      hline.after=c(-1,0,12, 21, 29, 36), digits = 0,
      sanitize.colnames.function = identity,
      size = "scriptsize")


outfdrb <- data.frame(pi0 = pi0, fdrb.mean = fdrb.mean, fdrb.se= fdrb.se, true.model = best.model)
outfdrf <- data.frame(pi0 = pi0, fdrf.mean = fdrf.mean, fdrf.se= fdrf.se, true.model = best.model)
outfdro <- data.frame(pi0 = pi0, fdro.mean = fdro.mean, fdro.se= fdro.se, true.model = best.model)
outfdrl <- data.frame(pi0 = pi0, fdrl.mean = fdrl.mean, fdrl.se= fdrl.se, true.model = best.model)

# outfdrb
# outfdro
# outfdrf
# outfdrl

outpaucb <- data.frame(pi0 = pi0, paucb.mean = paucb.mean, paucb.se= paucb.se, true.model = best.model)
outpaucf <- data.frame(pi0 = pi0, paucf.mean = paucf.mean, paucf.se= paucf.se, true.model = best.model)
outpauco <- data.frame(pi0 = pi0, pauco.mean = pauco.mean, pauco.se= pauco.se, true.model = best.model)
outpaucl <- data.frame(pi0 = pi0, paucl.mean = paucl.mean, paucl.se= paucl.se, true.model = best.model)

# outpaucb
# outpauco
# outpaucf
# outpaucl


outstb <- data.frame(pi0 = pi0, stb.mean = stb.mean, stb.se= stb.se, true.model = best.model)
outstf <- data.frame(pi0 = pi0, stf.mean = stf.mean, stf.se= stf.se, true.model = best.model)
outsto <- data.frame(pi0 = pi0, sto.mean = sto.mean, sto.se= sto.se, true.model = best.model)
outstl <- data.frame(pi0 = pi0, stl.mean = stl.mean, stl.se= stl.se, true.model = best.model)

# outstb
# outsto
# outstf
# outstl
# 
fdr <- c(fdrb.mean, fdro.mean, fdrl.mean, fdrf.mean)
pauc<- c(paucb.mean, pauco.mean, paucl.mean, paucf.mean)
st <- c(stb.mean, sto.mean, stl.mean, stf.mean)

fdrse <- c(fdrb.se, fdro.se, fdrl.se, fdrf.se)
paucse<- c(paucb.se, pauco.se, paucl.se, paucf.se)
stse <- c(stb.se, sto.se, stl.se, stf.se)

p <- rep(pi0, 4)
mt <- rep(c("B", "O", "L", "F"), each = 4)
library(ggplot2)
d2 <- data.frame(p = p, mt = mt, fdr = fdr, pauc = pauc, st = st,
                  fdrse = fdrse, paucse = paucse, stse = stse)

# 
# p1 <- ggplot(d2, aes(p, fdr, group = mt, color = mt)) + geom_line()
# p1
# 
# p2 <- ggplot(d2, aes(p, pauc, group = mt, color = mt)) + geom_line()
# p2

@

\newpage

<<fig.height=14,fig.width=10, echo=FALSE,warning=FALSE,message=FALSE>>=
d <- rbind(d1, d2)
# dim(d)

dd <- cbind(d, sc = rep(c("pvalue05", "ks"), each = dim(d1)[1]))
# p3 <- ggplot(dd, aes(p, fdr, group = mt, color = mt)) + geom_line() +
#   facet_grid(. ~ sc)+ geom_hline(yintercept = 0.05)


p3 <- ggplot(dd, aes(x=p, y=fdr, colour=mt, group = mt)) + 
    geom_errorbar(aes(ymin=fdr-fdrse, ymax=fdr+fdrse), width=.01, size = 1.5) +
    geom_line(size = 1.5) +
    geom_point(size = 3)+
  facet_grid(. ~ sc)+ geom_hline(yintercept = 0.05)+
  scale_colour_hue(name="Method", # Legend label, use darker colors
                     breaks=c("B", "F", "O", "L"),
                     labels=c("Backward", "Full", "Oracle", "Line")) +
   theme(legend.text=element_text(size=18))+
  theme(legend.title = element_text(size = 18)) + 
  theme(strip.text.x = element_text(size = 18))+
  theme(axis.text = element_text(size = 12), 
        axis.title = element_text(size = 20))+
  xlab(expression(paste(pi)))+
  ylab("FDR")

# p3

p4 <- ggplot(dd, aes(x=p, y=pauc, colour=mt, group = mt)) + 
    geom_errorbar(aes(ymin=pauc-paucse, ymax=pauc+paucse), width=.01, size = 1.5) +
    geom_line(size =1.5) +
    geom_point(size = 3)+
  facet_grid(. ~ sc)+
  scale_colour_hue(name="Method", # Legend label, use darker colors
                     breaks=c("B", "F", "O", "L"),
                     labels=c("Backward", "Full", "Oracle", "Line")) +
   theme(legend.text=element_text(size=18))+
  theme(legend.title = element_text(size = 18)) + 
  theme(strip.text.x = element_text(size = 18))+
  theme(axis.text = element_text(size = 12), 
        axis.title = element_text(size = 20))+
  xlab(expression(paste(pi)))+
  ylab("PAUC")

# p4


p5 <- ggplot(dd, aes(x=p, y=st, colour=mt, group = mt)) + 
    geom_errorbar(aes(ymin=st-stse, ymax=st+stse), width=.01, size = 1.5) +
    geom_line(size = 1.5) +
    geom_point(size = 3)+
  facet_grid(. ~ sc)+
  scale_colour_hue(name="Method", # Legend label, use darker colors
                     breaks=c("B", "F", "O", "L"),
                     labels=c("Backward", "Full", "Oracle", "Line")) +
   theme(legend.text=element_text(size=18))+
  theme(legend.title = element_text(size = 18)) + 
  theme(strip.text.x = element_text(size = 18))+
  theme(axis.text = element_text(size = 12), 
        axis.title = element_text(size = 20))+
  xlab(expression(paste(pi)))+
  ylab("S")

# p5

require(gridExtra)
grid.arrange(p3, p4, p5, nrow=3)
@

\section*{Acknowledgments}
% This material is based upon work supported by Agriculture and Food
% Research Initiative Competitive Grant No. 2011-68004-30336 from
% the USDA National Institute of Food and Agriculture, and the
% National Science Foundation (NSF) under Grant No. 0922746.
% Any opinions, findings, and conclusions or recommendations expressed
% in this material are those of the authors and do not necessarily reflect
% the views of the USDA or NSF.

%% HERE WE DECLARE THE BIBLIOGRAPHYSTYLE TO USE AND THE BIBLIOGRAPHY DATABASE

\end{document}